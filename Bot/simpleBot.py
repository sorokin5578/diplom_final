import telebot
from telebot import types
import yfinance as yf
from stocker.stocker import Stocker
from DBConnector.simpleDB import *
from My_CNN_network.simpleCNN import call_network
from utils.Config import TOKEN

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def help_command(massage):
    user_from_db = get_user(massage.chat.id)
    if not user_from_db:
        user_from_db = add_new_user(massage.chat.id, massage.from_user.first_name)
        bot.send_message(massage.chat.id,
                         "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{0.first_name}</b>."
                         "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–π (–¥–æ {1}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done"
                         "\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—åüëá".format(
                             massage.from_user, user_from_db.type_count), parse_mode='html')
        bot.send_message(massage.chat.id, "https://finance.yahoo.com")
    else:
        bot.send_message(massage.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{0.first_name}</b>."
                                          "\n–í—ã —É–∂–µ –æ–±—â–∞–ª–∏—Å—å —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–∞–∂–º–∏—Ç–µ /my_bag."
                                          "\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ /info."
                                          "\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–∞–∂–º–∏—Ç–µ /change.".format(massage.from_user),
                         parse_mode='html')


@bot.message_handler(commands=['help'])
def help_command(massage):
    user_from_db = get_user(massage.chat.id)
    bot.send_message(massage.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done"
                                      "\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—åüëá".format(
        user_from_db.type_count - len(user_from_db.stocks)))
    bot.send_message(massage.chat.id, "https://finance.yahoo.com")


@bot.message_handler(commands=['done'])
def set_of_stock(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        if user_from_db.stocks:
            r = ", ".join([stock.name for stock in user_from_db.stocks])
            bot.send_message(massage.chat.id,
                             "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π: {0}.\n–ù–∞–∂–º–∏—Ç–µ /info, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!"
                             "\n–ò–ª–∏ /change, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.".format(r))
        else:
            bot.send_message(massage.chat.id, "{0.first_name}, –≤—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                                              "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {1}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
                                              "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done".format(massage.from_user, user_from_db.type_count))
    except:
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(commands=['info'])
def get_info(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        if user_from_db.stocks:
            bot.send_message(massage.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –∏—â—É üîé")
            send_info(user_from_db.stocks, user_from_db.user_id)
        else:
            bot.send_message(massage.chat.id, "{0.first_name}, –≤—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                                              "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {1}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
                                              "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done".format(massage.from_user, user_from_db.type_count))
    except:
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(commands=['role'])
def get_info(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        max_count = get_max_type_count()
        if max_count == user_from_db.type_count:
            bot.send_message(massage.chat.id,
                             "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É –≤–∞—Å –Ω–∞–∏–ª—É—á—à–∏–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {}.".format(user_from_db.type_name))
        else:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            types_of_user = get_types(user_from_db.type_count)
            for type_of_user in types_of_user:
                keyboard.add(types.InlineKeyboardButton(str(type_of_user), callback_data=str(type_of_user.type_name)))
            msg = "–í–∞—à —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}. –í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –µ–≥–æ!"
            bot.send_message(massage.chat.id, msg.format(user_from_db.type_name), reply_markup=keyboard)
    except Exception as e:
        print(e)
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(commands=['info_by_ticker'])
def get_info(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        for stock in user_from_db.stocks:
            keyboard.add(
                types.InlineKeyboardButton(stock.ticker, callback_data='info ' + stock.ticker))
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        bot.send_message(massage.chat.id, msg.format(user_from_db.type_name), reply_markup=keyboard)
    except Exception as e:
        print(e)
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(commands=['predict_for_60'])
def get_info(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        for stock in user_from_db.stocks:
            keyboard.add(
                types.InlineKeyboardButton(stock.ticker, callback_data='predict ' + stock.ticker))
        msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 60 –¥–Ω–µ–π:"
        bot.send_message(massage.chat.id, msg.format(user_from_db.type_name), reply_markup=keyboard)
    except Exception as e:
        print(e)
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        key = call.data.split(' ')
        if key[0] == 'user' or key[0] == 'super':
            edit_user_type(call.message.chat.id, call.data)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞—à —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {}".format(call.data),
                                  reply_markup=None)
        elif key[0] == 'info':
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –∏—â—É üîé")
            send_info([Stock(key[1], None)], call.message.chat.id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É - /info_by_ticker",
                                  reply_markup=None)
        else:
            bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è —Å—á–∏—Ç–∞—é üîé")
            stocker = Stocker(key[1])
            img = open(stocker.predict_future(days=60)[1], 'rb')
            bot.send_message(call.message.chat.id, "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏ {} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 60 –¥–Ω–µ–π".format(key[1]))
            bot.send_photo(chat_id=call.message.chat.id, photo=img)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ 60 –¥–Ω–µ–π - /predict_for_60",
                                  reply_markup=None)

    except Exception as e:
        print(e)
        bot.send_message(call.message.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")
        pass


@bot.message_handler(commands=['my_bag'])
def get_bag(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        if not user_from_db.stocks:
            bot.send_message(massage.chat.id, "{0.first_name}, –≤—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å."
                                              "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {1}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
                                              "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done".format(massage.from_user, user_from_db.type_count))
        else:
            r = ", ".join([stock.name for stock in user_from_db.stocks])
            bot.send_message(massage.chat.id,
                             "–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π: {0}.\n–ù–∞–∂–º–∏—Ç–µ /info, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –Ω–∏—Ö!".format(r))
    except:
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(commands=['change'])
def change_bag(massage):
    try:
        user_from_db = get_user(massage.chat.id)
        del_stocks_by_user_id(user_from_db.user_id)
        bot.send_message(massage.chat.id, "{0.first_name}, –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π –±—ã–ª —É–¥–∞–ª–µ–Ω."
                                          "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {1}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
                                          "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done".format(massage.from_user, user_from_db.type_count))
    except:
        bot.send_message(massage.chat.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def listen_msg(massage):
    user_from_db = get_user(massage.chat.id)
    max_count_for_current_role = user_from_db.type_count
    current_count = len(user_from_db.stocks)
    try:
        stocks = set([i.strip() for i in str(massage.text).upper().split(",")])
        common_stock = get_common_stock(stocks, user_from_db.stocks)
        if common_stock:
            bot.send_message(massage.chat.id, "{0.first_name}, –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π —É–∂–µ —Å–æ–¥–µ—Ä–¥–∂–∏—Ç —Ç–∏–∫–µ—Ä - {1}."
                                              "\n–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã –∞–∫—Ü–∏–π (–¥–æ {2}  —à—Ç—É–∫) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, "
                                              "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done".format(massage.from_user, common_stock,
                                                                           max_count_for_current_role - current_count))
            return

        if len(stocks) > max_count_for_current_role - current_count:
            additional_string = ''
            if max_count_for_current_role < get_max_type_count():
                additional_string = "\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫—Ü–∏–π –≤—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ - /role" \
                                    "\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: {}".format(user_from_db.type_name)
            bot.send_message(massage.chat.id, "{0.first_name}, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤."
                                              "\n–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {1} —à—Ç.{2}"
                                              "\n–ù–∞–∂–º–∏—Ç–µ /info, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!"
                                              "\n–ò–ª–∏ /change, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.".format(massage.from_user,
                                                                                            max_count_for_current_role - current_count,
                                                                                            additional_string))
            return

        stocks_for_saving = []
        stocks_with_err = []
        tickers = yf.Tickers(" ".join(stocks))
        for stock in stocks:
            st_from_yahoo = tickers.tickers.get(stock)
            if st_from_yahoo and st_from_yahoo.get_info() and st_from_yahoo.get_info().get("symbol"):
                ticker = st_from_yahoo.get_info().get("symbol")
                name = ticker
                if st_from_yahoo.get_info().get("shortName"):
                    name = st_from_yahoo.get_info().get("shortName")
                elif st_from_yahoo.get_info().get("longName"):
                    name = st_from_yahoo.get_info().get("longName")
                stock_obj = Stock(ticker, name)
                is_saved = add_new_stocks(stock_obj)
                if is_saved:
                    stocks_for_saving.append(stock_obj)
                else:
                    stocks_with_err.append(stock_obj)
            else:
                stocks_with_err.append(Stock(stock, stock))

        res_stocks = []
        for stock in stocks_for_saving:
            if add_stock_for_user(user_from_db.user_id, stock):
                res_stocks.append(stock)
            else:
                stocks_with_err.append(stock)

        if res_stocks:
            bot.send_message(massage.chat.id,
                             "–ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª –¥–ª—è –≤–∞—Å {0}, –Ω–∞–∂–º–∏—Ç–µ /done".format(
                                 ", ".join([i.ticker for i in res_stocks])))

        if stocks_with_err:
            bot.send_message(massage.chat.id,
                             "–ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –≤–∞—Å {0}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                             .format(", ".join([i.ticker for i in stocks_with_err])))
    except Exception as e:
        print(e)
        bot.send_message(massage.chat.id, "–£–ø—Å, {0.first_name},—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò¢".format(massage.from_user))


def send_info(stocks, user_id):
    tickers = yf.Tickers(" ".join([stock.ticker for stock in stocks]))
    for stock in stocks:
        try:
            info_stock = []
            ticker = tickers.tickers.get(stock.ticker)
            ticker_info = ticker.get_info()
            ticker_news = ticker.get_news()
            ticker_recommendation = None
            stocker = Stocker(stock.ticker)
            estimate_price = stocker.predict_future(days=3)[0]['estimate'].to_numpy()[0]
            try:
                ticker_recommendation = ticker.get_recommendations(as_dict=True)
            except AttributeError as e:
                pass
            info_stock.append("<b>üè¶ –ö–æ–º–ø–∞–Ω–∏—è:</b> " + str(ticker_info.get("shortName") or "-"))
            info_stock.append("–¢–∏–∫–µ—Ä: " + stock.ticker)
            info_stock.append("–°—Å—ã–ª–∫–∞: " + "https://finance.yahoo.com/quote/".format(stock.ticker))
            info_stock.append(
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: " + str(
                    ticker_info.get("currentPrice") or ticker_info.get("regularMarketPrice") or "-"))
            info_stock.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –Ø—Ö—É –§–∏–Ω–∞–Ω—Å: " + get_last_recommendation(ticker_recommendation))
            info_stock.append("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: " + price_to_str(estimate_price))
            if ticker_news:
                info_stock.append("üì∞ –ù–æ–≤–æ—Å—Ç–∏: ")
                for news in ticker_news[:5]:
                    forecast_num = call_network([news.get("title")])
                    if forecast_num[0][0] >= 0.4:
                        info_stock.append("–ü—Ä–æ–≥–Ω–æ–∑: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π ‚úÖ")
                    else:
                        info_stock.append("–ü—Ä–æ–≥–Ω–æ–∑: –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π ‚ùå")
                    info_stock.append("üóû " + news.get("title") + " " + news.get("link"))
            else:
                info_stock.append("üò¢ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç ")
            bot.send_message(user_id, "\n".join(info_stock), parse_mode='html')
        except Exception as e:
            print(repr(e))
            bot.send_message(user_id, "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {}üò¢".format(stock.ticker))


def get_common_stock(stocks, stocks_from_bd):
    for st in stocks:
        if stocks_from_bd.__contains__(Stock(st, None)):
            return st
    return None


def get_last_recommendation(recommendations):
    if recommendations:
        for recommendation in recommendations.items():
            if recommendation[0] == 'To Grade':
                last_date = max(recommendation[1].keys())
                return recommendation[1].get(last_date)
    return "-"


def price_to_str(price):
    try:
        return '{:.2f}'.format(price)
    except Exception as e:
        return "-"


bot.polling(none_stop=True)
